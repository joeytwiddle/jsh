#!/bin/sh 

# Wonder Shaper

# Modifications by Vince Mulhollon for debian package

if [ $# -eq 0 ]; then
  echo Please read the man page for the wondershaper and 
  echo the file /usr/share/doc/wondershaper/README.Debian.gz
  exit
fi

if [ $# -eq 1 ]; then
  tc -s qdisc ls dev $1
  tc -s class ls dev $1
  exit
fi

if [ $# -eq 2 ]; then
  tc qdisc del dev $2 root    2> /dev/null > /dev/null
  tc qdisc del dev $2 ingress 2> /dev/null > /dev/null
  echo Wondershaper queues have been cleared.
  exit
fi

if [ $# -ne 3 ]; then
  echo Please read the man page for the wondershaper and
  echo the file /usr/share/doc/wondershaper/README.Debian.gz
  exit
fi

# please read the README before filling out these values 
#
# Set the following values to somewhat less than your actual download
# and uplink speed. In kilobits. Also set the device that is to be shaped.
DOWNLINK=$2
UPLINK=$3
DEV=$1

# low priority OUTGOING traffic - you can leave this blank if you want
# low priority source netmasks
NOPRIOHOSTSRC=

# low priority destination netmasks
NOPRIOHOSTDST=

# low priority source ports
NOPRIOPORTSRC="34727 6881 4444"   # I had 80 here when some guy was mirroring my server.  But now I've fixed limits so it will always share a little of the last class.

# low priority destination ports
NOPRIOPORTDST=

# Now remove the following two lines :-)

#echo Please read the documentation in 'README' first :-\)
#exit

#########################################################

#if [ "$1" = "status" ]
#then
#	tc -s qdisc ls dev $DEV
#	tc -s class ls dev $DEV
#	exit
#fi


# clean existing down- and uplink qdiscs, hide errors
tc qdisc del dev $DEV root    2> /dev/null > /dev/null
tc qdisc del dev $DEV ingress 2> /dev/null > /dev/null

#if [ "$1" = "stop" ] 
#then 
#	exit
#fi

###### uplink

# install root CBQ

tc qdisc add dev $DEV root handle 1: cbq avpkt 1000 bandwidth 10mbit 
## Joey thinks all traffic should be limited to his desired max :P
# tc qdisc add dev $DEV root handle 1: cbq avpkt 1000 bandwidth ${UPLINK}kbit

## But the graph in gkrellm showed that going completely mental.  :P
## Oh look below: isolated class 1: should limit everything to UPLINK rate.
## But I swear, when I pushed my webserver port 80 into LOWPRIO class 1:30, and
## torrents continued on 1:20, I was seeing up to double upload speed (in
## gkrellm and traffic_shaping_monitor).  Can we blame that on UDP?
## Hmm even just with the webserver, class 1:30 is actually limiting to the
## 8*UPLINK/10 it specifies!  If these limits are then just recommendations
## when the stream is full, I shall reduce them to 4:4:2.  But they aren't: the
## stream was "full" but output exceeded the 1: limit anyway!

# shape everything at $UPLINK speed - this prevents huge queues in your
# DSL modem which destroy latency:
# main class

tc class add dev $DEV parent 1: classid 1:1 cbq rate ${UPLINK}kbit \
   allot 1500 prio 5 bounded isolated 

# The rates set below are the max each class will use when the top class is
# flooded.  If the top class is not flooded, they will expand to fill it, in
# proportion to the rates given.  However if the total of the rates you give
# adds up to more than the real total, two or three active classes may
# overflood the interface's max bandwidth!

# high prio class 1:10:

tc class add dev $DEV parent 1:1 classid 1:10 cbq rate $((50*UPLINK/100))kbit \
   allot 1600 prio 1 avpkt 1000

# bulk and default class 1:20 - gets slightly less traffic, 
#  and a lower priority:

tc class add dev $DEV parent 1:1 classid 1:20 cbq rate $((40*$UPLINK/100))kbit \
   allot 1600 prio 2 avpkt 1000

# 'traffic we hate'

tc class add dev $DEV parent 1:1 classid 1:30 cbq rate $((10*$UPLINK/100))kbit \
   allot 1600 prio 2 avpkt 1000

# all get Stochastic Fairness:
tc qdisc add dev $DEV parent 1:10 handle 10: sfq perturb 10
tc qdisc add dev $DEV parent 1:20 handle 20: sfq perturb 10
tc qdisc add dev $DEV parent 1:30 handle 30: sfq perturb 10

# start filters
# TOS Minimum Delay (ssh, NOT scp) in 1:10:
tc filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
      match ip tos 0x10 0xff  flowid 1:10

# ICMP (ip protocol 1) in the interactive class 1:10 so we 
# can do measurements & impress our friends:
tc filter add dev $DEV parent 1:0 protocol ip prio 11 u32 \
        match ip protocol 1 0xff flowid 1:10

# pablo.iranzo@uv.es provided a patch for the MLDonkey system
# The MLDonkey uses small UDP packets for source propogation
# which floods the wondershaper out.
tc filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
   match ip protocol 17 0xff \
   match ip sport 4666 0xffff \
   flowid 1:30

# prioritize small packets (<64 bytes)

tc filter add dev $DEV parent 1: protocol ip prio 12 u32 \
   match ip protocol 6 0xff \
   match u8 0x05 0x0f at 0 \
   match u16 0x0000 0xffc0 at 2 \
   flowid 1:10



## Joey's additional rules - high priority ports, applied to both ingress and egress to/from said ports.
## BUG TODO: Not successfully applied to ingress yet!
HIPRIOLOCALPORTS=""                      # "22 222"
HIPRIOREMOTEPORTS="7777 7778 80"         # 22         apparently ssh/scp are dealt with by TOS
for a in $HIPRIOLOCALPORTS
do
	tc filter add dev $DEV parent 1: protocol ip prio 12 u32 \
	   match ip sport $a 0xffff flowid 1:10
done
for a in $HIPRIOREMOTEPORTS
do
	tc filter add dev $DEV parent 1: protocol ip prio 12 u32 \
	   match ip dport $a 0xffff flowid 1:10
done
# These need to be above the final non-interactive filter.  We check them early.



# some traffic however suffers a worse fate
for a in $NOPRIOPORTDST
do
	tc filter add dev $DEV parent 1: protocol ip prio 14 u32 \
	   match ip dport $a 0xffff flowid 1:30
done

for a in $NOPRIOPORTSRC
do
 	tc filter add dev $DEV parent 1: protocol ip prio 15 u32 \
	   match ip sport $a 0xffff flowid 1:30
done

for a in $NOPRIOHOSTSRC
do
 	tc filter add dev $DEV parent 1: protocol ip prio 16 u32 \
	   match ip src $a flowid 1:30
done

for a in $NOPRIOHOSTDST
do
 	tc filter add dev $DEV parent 1: protocol ip prio 17 u32 \
	   match ip dst $a flowid 1:30
done

# rest is 'non-interactive' ie 'bulk' and ends up in 1:20

tc filter add dev $DEV parent 1: protocol ip prio 18 u32 \
   match ip dst 0.0.0.0/0 flowid 1:20


########## downlink #############
# slow downloads down to somewhat less than the real speed  to prevent 
# queuing at our ISP. Tune to see how high you can set it.
# ISPs tend to have *huge* queues to make sure big downloads are fast
#
# attach ingress policer:

tc qdisc add dev $DEV handle ffff: ingress
## A failed attempt to stop below breaking:
# tc qdisc add dev $DEV root handle ffff: cbq avpkt 1000 bandwidth 10mbit ingress

# First apply priority to important stuff
## BUG: "RTNETLINK answers: Operation not supported" x 2 from this line
# tc qdisc add dev $DEV parent ffff:11 handle 11: sfq perturb 10
# for a in $HIPRIOLOCALPORTS
# do
	# tc filter add dev $DEV parent ffff: protocol ip prio 12 u32 \
	   # match ip dport $a 0xffff flowid ffff:11
# done
# for a in $HIPRIOREMOTEPORTS
# do
	# tc filter add dev $DEV parent ffff: protocol ip prio 12 u32 \
	   # match ip sport $a 0xffff flowid ffff:11
# done

# filter *everything* to it (0.0.0.0/0), drop everything that's
# coming in too fast:

tc filter add dev $DEV parent ffff: protocol ip prio 50 u32 match ip src \
   0.0.0.0/0 police rate ${DOWNLINK}kbit burst 10k drop flowid :1

