#!/bin/sh
### BEGIN INIT INFO
# Provides:          hwibot.outer
# Required-Start:    $remote_fs csf
# Required-Stop:     $remote_fs
# Should-Start:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
## Short-Description: hwibot
## Description:       Enable hwi's services running in /mnt/hwibot chroot
### END INIT INFO

# We previously required sshd_gentoo for the grimeape service started in hwibot.inner

# TODO for LSB: start, stop, restart, force-reload, and status; log_success_msg, log_failure_msg and log_warning_msg

TARGET=/mnt/hwibot
## We could derived MNTPNTS from the target's /etc/fstab, or more simply from
## the list of directories under /mnt
# MNTPNTS="big data morphix floppy gentoo mandrake space hdb5 hda3 hdb7 hdb8 win98"
MNTPNTS="space big hdb7 hdb6"
NICE_THE_CHROOT="nice -n 4"
# This has no effect on e.g. Apache or anything as far as I can see!
# Well duh.  Now trying moving the nice inside the chroot command (previously came before chroot)!
# Errrrr that gave: /usr/bin/nice: /usr/bin/nice: cannot execute binary file
# Meh we have it inside hwibot's hwibot.inner anyway and it doesn't work there.

if [ "$1" = start ]
then

	echo -n "hwibot: "

	## Doesn't work?  Needs to be run from root directory?
	## DONE: This -t method wasn't working.  (When I ssh into the chroot the shell freezes!)  But now neither method is working!
	##       However, if I jchroot into "$TARGET" and start sshd that way, it works fine!
	##       Ahhh the problem was /dev/pts!
	chroot "$TARGET" mount -t proc /proc /proc
	# mount --bind /proc "$TARGET"/proc
	## TODO TEST: This is often not unmounted (busy) and then when started again, another bindmount is created!
	##            Can we do -o remount?  Will that work first time, and not re-create on subsequent times?  Or can we do something else?  E.g. detect with mount|grep and skip.
	mount --bind /dev "$TARGET"/dev
	mount --bind /dev/pts "$TARGET"/dev/pts
	## Doesn't work, inner mounts disappear in target.
	# mount --bind /mnt "$TARGET"/mnt
	## TODO: check originals are mounted on local machine (otherwise the binds are pointless)!
	for POINT in $MNTPNTS
	do
		mount --bind /mnt/"$POINT" "$TARGET"/mnt/"$POINT"
		## Readonly can be done on bindmounts, but only retrospectively.
		## We may not want this!  Some things on / and /home point into these folders!  (E.g. Mail)
		# mount -o remount,ro "$TARGET"/mnt/"$POINT"
	done
	# mount --bind /mnt/mainhome "$TARGET"/home
	mount --bind /home "$TARGET"/home

	screen -wipe
	# inscreendo hwibot chroot /mnt/debian /etc/init.d/hwibot.inner start
	# bash -l -c "$JPATH/jsh inscreendo hwibot chroot '$TARGET' /bin/bash -- /etc/init.d/hwibot.inner -block start"
	# bash -l -c "/usr/local/jsh/jsh inscreendo hwibot chroot '$TARGET' /bin/bash -- /etc/init.d/hwibot.inner -block start"
	export SERVICES="" ## Overwrite the services set in game-interrupting-services!
	# bash -l -c "/home/joey/j/jsh inscreendo hwibot chroot '$TARGET' /bin/bash -- /etc/init.d/hwibot.inner -block start"
	## DONE: Rather than leaving a lame shell in a screen, maybe make hwibot.inner log somewhere, wait for the call to finish, then cat the log (or just show it inline here!).
	$NICE_THE_CHROOT chroot "$TARGET" /bin/bash -- /etc/init.d/hwibot.inner start
	# &

	# echo "started"
	# sleep 5 ; echo "forked"
	# echo "forking" ; sleep 5
	# echo "started (results of start script should be available in screen \"hwibot\")"

elif [ "$1" = stop ]
then

	echo -n "hwibot: "

	chroot "$TARGET" /etc/init.d/hwibot.inner stop

	## Should only do this if we are definitely the last chroot:
	## Some unmounts tend to fail if we don't give the services time to fully close.  (Or was it other processes?)
	sleep 1
	# chroot "$TARGET" umount -lf /proc
	chroot "$TARGET" umount /proc
	# umount "$TARGET"/proc
	umount "$TARGET"/dev/pts
	umount "$TARGET"/dev
	umount "$TARGET"/dev   ## Sometimes there is one left?  Or I guess sometimes it fails to unmount (e.g. if someone has logged into the sshd)
	for POINT in $MNTPNTS
	do umount "$TARGET"/mnt/"$POINT"
	done
	umount "$TARGET"/home

	echo "stopped"

	# echo "Note: the shell started in screen may still be running (check with: listopenfiles | grep \"$TARGET\")"
	# echo "Note: the shell started in screen may still be running (check with: screen -S hwibot -D -RR)"
	# echo "This may also leave redundant $TARGET/proc mounts."
	mount | grep "`realpath "$TARGET"`"/ && echo "I can see some mounts which were not cleanly unmounted!"

else

	echo "Don't understand \"$1\".  Try \"start\" or \"stop\"."
	exit 1

fi
