Jsh Policy

Runtime:

	The current setup is as follows:
		Initially, either jsh is run or startj is sourced (possibly passed some options) with the following results:
			The environment variable $JPATH is set.
			$JPATH/tools is added to the PATH (TODO: would this be better as /bin?)
			$JPATH/tools contains all the scripts =)
			(Oh and some user-shell stuff is setup, like prompts, keys, terminal titles.)

	Most scripts require only that they can execute other jsh scripts, which is made possible by the above situation.

	Some scripts have vital dependencies on working exes: jgettmp, memo, and jwhich, and some scripts require $JPATH and directories beneath it.

	(Currently $JPATH/tools contains a load of links to scripts in the $JPATH/code/shellscript tree.  The links are generated by refreshtoollinks.)

Development:

	Posix compliance: we use $HOME instead of ~, and the other thing I think, but we haven't yet separated exports into separate statements.

	I try to use if [ ... ]; instead of if test ...;

	compilejshscript uses the jsh-depends and similar tags (generated with jshdepwiz) to find each script's dependencies.

Recommended policy changes: (will move to previous section when implemented)

	That the shellscript tree be abandoned and replaced with an N-d categorisation implemented by jcat.

	That the scripts be designed to run standalone, with dependencies only on each other.
		This means simplyfying those verbosely documented but commonly used scripts.
		Remove references to JPATH in favour of something more portable.  Have /optional/ variables eg. TMPDIR CONFDIR PROGNAME_CONFDIR etc.
		Have scripts do dependency-checking to check whether its dependencies are present.

	Make it Unix comptabile: so that a user can install a package of a certain release of jsh, and it will sit nicely in their system.
