Jsh Policy

Runtime:

	The current setup is as follows: Initially, either jsh is run or startj is
	sourced (possibly passed some options) with the following results: The
	environment variable $JPATH is set.  $JPATH/tools is added to the PATH
	(TODO: would this be better as /bin?) $JPATH/tools contains all the scripts
	=) (Oh and some user-shell stuff is setup, like prompts, keys, terminal
	titles.)

	Most scripts require only that they can execute other jsh scripts, which is
	made possible by the above situation.

	Some scripts have vital dependencies on working exes: jgettmp, memo, and
	jwhich, and some scripts require $JPATH and directories beneath it.  See
	Dependencies.

	(Currently $JPATH/tools contains a load of links to scripts in the
	$JPATH/code/shellscript tree.  The links are generated by refreshtoollinks.)

Dependencies:

	compilejshscript uses the jsh-depends and similar tags (generated with
	jshdepwiz) to find each script's dependencies.

Documentation:

	Fully fledged script should present the --help option, which is
	automatically detected by "jdoc -hasdoc" when generating documentation.  See
	jdoc.

	In the absence of --help, the onelinedescription script will try to derive
	the script's description from a line near the top of the script.

	Just started experimenting with "## jsh-help: ..." at the top of scripts.
	This should be new policy in situations where --help is too cumbersome.

Development:

	Posix compliance: we use $HOME instead of ~, and the other thing I think,
	but we haven't yet separated exports into separate statements.

	I try to use if [ ... ]; instead of if test ...;

	I have avoided using exec <&3 and such craziness.  Which shell's am I
	continuing to support by doing this?!

Recommended policy changes: (will move to previous section when implemented)

	That the shellscript tree be abandoned and replaced with an N-d
	categorisation implemented by jcat.

	That the scripts be designed to run standalone, with dependencies only on
	each other.  This means simplifying those verbosely documented but commonly
	used scripts.  Remove references to JPATH in favour of something more
	portable.  Have /optional/ variables eg. TMPDIR CONFDIR PROGNAME_CONFDIR
	etc.  Have scripts do dependency-checking to check whether its dependencies
	are present.  Also do similar checking for needed env-vars.

	Make it Unix comptabile: so that a user can install a package of a certain
	release/subset of jsh, and it will sit nicely in their system.  (New scripts
	could go in /usr/bin, but overrides need to sit early on PATH than their
	counterparts, and may need to find counterpart when called (unj/jwhich).)

