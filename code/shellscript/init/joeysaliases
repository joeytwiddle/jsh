# @sourceme

## TODO: split this into jshaliases and a personal config
## aliases are worth keeping in one place because they are so fundamental to the user's shell that
## they should be easy to find if they prove troublesome
## new jsh users should be warned about shell aliases
## which or something nicer like whatis (ah that's already taken) should info of aliases before informing about cmd-line programs

# Note: some other aliases are initialised in dirhistorysetup

## TODO CONSIDER: How should we make a command?
#    - an Alias : [+] acts like a replacement, no need to pass args explicitly;
#                 [-] one-liners only.
#    - a Function : [+] multi-line, fast; [-] hog memory, global state.
#    - a Shellscript on the PATH : [+] separated, manageable; [-] slower.
## The answer is that rarely used scripts should be shellscripts, but very
## frequently used scripts/commands should be aliases and functions.
## So really we should load the core jsh commands as functions which should be
## accessible to scripts.
## TODO: Migrate the obscure stuff here the "rare" yard or joey's personal config.

## We shouldn't modify shell behaviour unless this is a user shell.
## e.g. FTPDrive was barfing because our ftpd was running our ls alias.
## But the following was failing on TERM=screen and many other types
# if [ "$TERM" = linux ] || [ "$TERM" = xterm ]
## Maybe better to check for TTY.
## isatty is not only *wrong* but can also break with "Cannot write to /dev/stdout".  (This is either because of a virtualized system, but more likely after logging in as root and then becoming a user with su.)
# if isatty
if [ -t 1 ]
then



## == JSH Aliases: Settings ==

## Without this, top can respond when the xterm is resized.
## I don't remember why I enabled it.
# test "$COLUMNS" && export COLUMNS



## == JSH Aliases: Overrides ==

## Most lusers want this:
alias mv='mv -i'

rm_is_disabled() {
	# In zsh echo shows \rm
	# In bash echo shows \\rm
	# But if we use printf, they both show the same
	printf "%s\n" "rm is disabled, use trash or \\rm instead."
	return 1
}
alias rm='rm_is_disabled'

alias man='jman'

## japropos is nice for the user (at least I think so)
# alias apropos=japropos
alias apropos='NOPROGRESS=true catch japropos'

HIGHESTPRIORITYPROGS="cdrecord mkisofs xcdroast"
# HIGHPRIORITYPROGS='xmms mplayer mpg123'
## don't usually have root for these, but could sudo them
for PROG in $HIGHESTPRIORITYPROGS
do [ "$UID" = 0 ] && alias "$PROG"="nice -n -20 $PROG"
done

## BUG: By redefining the grep alias here, the aliases defined in preventgreperrs are lost!
## So I disabled preventgreperrs; no point loading it if we won't use it.
#. preventgreperrs
# alias grep='grep --line-buffered'
alias grep='grep --line-buffered --colour=auto'
alias sed='sed -u'



## == JSH Aliases: Additions ==

alias igrep='grep -i'

# alias jhelp="$JPATH/tools/help" ## Because bash went and used it!
# alias help='jhelp' ## Hehe I stole it back! (U can still type 'help' for bash's)
## Hmm, seems rude, so leaving help as it was.

## We should do this for everything (no reason why not to, apart from memo diskspace usage I guess):
# alias dusk='memo -t "1 day" dusk'
# alias dusk='memo -t "1 month" dusk'
alias dusk='memo -t "1 year" dusk'
## BUG: Unfortunately we can't use -f or -t because there may be multiple arguments :f

## newdusk does not memo, to ensure that olddusk will still work.
alias newdusk='dusk'
alias olddusk='memo -c true dusk'
# alias olddusk='memo -t "3 years" dusk'
# alias deepdusk='memo -t "3 years" dusk'

alias redusk='rememo dusk'

## h is a shortcut for listing command-line history of the current shell.
## It is aliased from h to myhist which is a function.
##   h             list recent history
##   h . | h 0     list all history (in zsh this is 'history 0', in bash just 'history')
##   h <pattern>   list recent history matching <pattern>
## We need this as a function rather than a script, because a script would load its own history?
## Actually the zsh pattern implementation shows all matching, not just recent.
alias h='hist'
alias hist=myhist
if [ "$SHORTSHELL" = zsh ]
then
	# . pawan_zshrc_stripped
	myhist() {
		# if ! ([ "$1" = 0 ] || [ "$1" = . ])
		if [ "$1" = '' ]
		then history 1 | tail -n "$((LINES-2))"
		else
			if [ "$*" = 0 ] || [ "$*" = . ]
			then search='^'   # show everything
			#else search="^ *[0-9][0-9]*  *.*$*"   # highlights up to the pattern; not really desirable!  Perhaps I was trying to avoid matching the history number when the pattern was a number
			else search="$*"
			fi
			history 0 | grep "$search"
			echo "${search_history_reminder}"
		fi
	}
elif [ "$SHORTSHELL" = bash ]
then
	myhist() {
		if [ "$1" = 0 ] || [ "$1" = . ]
		then history
		else history | grep "^ *[0-9][0-9]*  *.*$*" | tail -n "$((LINES-2))"
			echo "${search_history_reminder}"
		fi
	}
fi
search_history_reminder="$(curseyellow)""Hit CTRL-R for reverse history search.  Or in jsh bash CTRL-? or jsh zsh: CTRL-[]""$(cursenorm)"

## Alternative: histlist displays your history search results through less.
# histlist() {
	# history 0 | grep "$*" | less +G
# }
# alias h='histlist'

alias quiet='fadevolume 0'




## == Joey's Aliases: Settings ==

## TODO: Default options should go in a different file from shortcut functions.
## Users may want to copy the default options file and edit it (e.g. remove MEMO_SHOW_INFO).

## No it's not good to have memo on an alias, because sometimes I want to pass it arguments!
# export MEMO_SHOW_INFO=true
export MEMO_SHOW_NEW_CACHEFILES=true
## Better might be:
export MEMO_DEFAULT_CONDITION='( touch -d "2 hours ago" $AGEFILE ; newer $AGEFILE "$MEMOFILE" )'
## but this is not yet supported by the memo script :P



## TODO: If the user uses memo instead of rememo, should we re-use the memoed files even if it is "out of date" according to "default condition"?
alias memo='memo -info'



## == Joey's Aliases: Overrides ==

## -a is nice, it will copy directories recursively; -i because i don't want to overwrite stuff by accident
alias cp='cp -a -i'

alias locate='memo -nd -t "1 day" locate'
alias locateonly='memo -nd -t "1 day" locateonly'
alias locateend='memo -nd -t "1 day" locateend'
alias locateword='memo -nd -t "1 day" locateword'
alias ilocate='memo -nd -t "1 day" ilocate'

## Actually my ls and l aliases are now overriden by myls later.
## Anyway I don't really need or want an alias for ls
# if test $JM_COLOUR_LS; then
# 	XARGS='h --color'
# 	## We should share the following with getmachineinfo's JM_LS_OPTS
# 	alias ls="ls -atrFb$XARGS --time-style=long-iso"
# elif test $JM_DOES_COLOUR; then
# 	alias ls='fakels'
# else
# 	alias ls='ls -atrF'
# fi

## This has some nasty problems - put it in config/auto.sh until it's fixed!
# alias tail=prettytail
### e.g.:
### /home/joey/linux/j/tools/prettytail: line 40: 22909 Terminated              ( SLEEPTIME=15; while true; do
### sleep $SLEEPTIME; echo "[tail] ... $SLEEPTIME seconds passed" | highlight ".*" blue 1>&2;
### done )

alias xterm='xtermbg'

## TODO: If the user uses memo instead of rememo, should we re-use the memoed file even if it is "out of date" according to "default condition"?
# alias memo='memo -info -t "2 hours"'

## Should not be called by shellscripts:
## Problem: should be called: mount "$@"
jmount() {
	'mount' "$@" |
	highlight "\<rw\>" cyan |
	highlight "\<ro\>" red |
	highlight "\<bind\>" magenta
	# highlight_words
}
alias mount='jmount'

# alias mount="'mount' | highlight_words"

jshssh () {
	xttitle "=< ssh $* >="
	## This was supposed to prevent the remote server from changing the xttitle (altho if we ssh on from there we might want to).  But it made kx vi's PageUp/Down break: export TERM=vt100
	'ssh' "$@"
}
alias ssh='jshssh'

# My preferred ls options with one exception: Don't list dotfiles in the home folder
myls() {
	## I always use '-a' except when looking at '~'.  To -a my dotfiles, pass any argument, e.g. '.' or '-a'.
	if ( [ "$PWD" = "$HOME" ] && [ -z "$1" ] ) || [ "$*" = "$HOME" ]
	then 'ls' -lrtFh --color --block-size="'1" "$@"
	else 'ls' -lartFh --color --block-size="'1" "$@"
	fi
}
alias l='myls'

if [ -n "$ZSH_NAME" ]
then compdef myls=ls
fi

# ll does not show folder contents; also does not humanise sizes, so they are easier to compare.  Although dsr already does that!
# TODO: If given no arguments, should either drop the -d, or provide ./* as arguments.
alias ll="ls -lartFd --color --block-size=\"'1\""

# jfluxbox () {
	# . includepath /usr/local/fluxbox
	# 'fluxbox' "$@"
# }
# alias fluxbox='jfluxbox'

jcal() {
	## Highlight the current day (must strip underline termcodes to find it!)
	'cal' "$@" | sed 's+_++g' | highlight "\<`date | takecols 3`\>"
}
alias cal='jcal'

myxv() {
	'xv' -perfect "$@" &
}
alias xv=myxv



## == Joey's Aliases: Additions ==

# alias l='ls -l'
## superceded by the l shellscript:
# alias l='. l'

if [ -n "$ZSH_NAME" ]
then compdef l=ls
fi

## Haven't got used to this shortcut.  'ld' is already taken!
# alias dl='ls -ld'
## I'm still using: l -d

alias mykilljob=". 'mykilljob' -jc"

# alias wget='screen wget'

# Wow I only added 'm' and 'g' in 2012.  How many keystrokes have I wasted?

#alias m='more'
#alias le='less -R'
alias m='less -REX'
alias g='grep'
alias ig='igrep'
alias gi='igrep'

# This is the most common find operation I do
#alias fnd='find . -name'
# With common excludes
fnd() {
	# This will still traverse the unwanted folder, which is often large and slow
	#find . -name "$@" | grep -v "/node_modules/"
	# This will prevent traversal, but it will show the actual folder too
	#find . -name node_modules -prune -o -name "$@"
	# This will prevent traversal of the unwated folder, and avoid displaying it too
	#find . -not \( -path '*/node_modules' -prune \) -name "$@"
	# To exclude more folders, repeat another -not immediately after
	# Or this way:
	find . -not \( -path '*/node_modules' -prune -or -path '*/.git' -prune \) -name "$@"
	# You can also find a POSIX version here: https://stackoverflow.com/questions/4210042#comment75400572_16595367
}

# mm is like m but with syntax highlighting
mm () {
  # Using `less -REX` (aka `m`) cuts off the background color.
  # Using `more` the background uses the whole width of the terminal, but we get other bugs!
  # So we will default to `m` but the user can always pipe | to their own preferred pager, or cat.
  vimcat -o - "$@" | less -REX
}

alias wad='withalldo'
alias fed='foreachdo'
# Ever used?
alias rdl='removeduplicatelines'

# Let's go all out with this.
# But h and f already have uses.
#alias h='head -n'
#alias t='tail -n'
alias h1='head -n 1'
alias t1='tail -n 1'
alias hn='head -n'
alias tn='tail -n'
alias s='sort'
alias dc='dropcols'
alias tc='takecols'
#alias f='file'
alias i='file'

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
# I thought ^ might be a nice way to say "go up", but we cannot use it so easily.
# In zsh, our ^ alias does nothing.  Although eval "^" works fine.
# In bash we get ":s^: no previous substitution".  Again eval works fine.
#alias ^='cd ..'
#alias ^.='cd ../..'

alias md=mkdir
mkcd() {
	mkdir "$1"
	cd "$1"
}
alias mkmv='mkdirandmv'
alias mkdirmv='mkdirandmv'
alias mkexe='chmod a+x'


# Let Vim use Ctrl-Q and Ctrl-S
# I have since moved these into my .vimrc, so that they will run when vim is invoked by another program (e.g. git merge or visudo)
#pathToVim=`which vim`
#if [ -n "$pathToVim" ]
#then
#	vim() {
#		stty -ixon
#		"$pathToVim" "$@"
#		stty ixon
#	}
#fi

alias v='vim'
alias vd='vimdiff'
alias vv='vanillavim'

# Open vim with last opened file (I never remember to use this)
alias lvim="vim -c \"normal '0\""


alias fumount='fusermount -u'


# Open tmux in 256 color mode
alias tmux='tmux -2'


alias mpl=mplayer
if [ -x "$JPATH/tools/mplayer" ]
then alias mpl="$JPATH/tools/mplayer"
fi
#alias mpl='FAST=2 ~/j/tools/mplayer'

# Simply makes it possible to background a process using a prefix ('inbg'), rather than a postfix ('&')
inbg() {
	"$@" &
}

# Various apps I might start from the commandline, but I never actually want to run in the foreground.
# TODO: Avoid repetition by factoring out to a function.  Also consider sending the stdout+err of the process to somewhere else (e.g. a logfile, or a separate screen/tmux window, or an xterm) to avoid cluttering the user's shell.
alias smpl='inbg smplayer -add-to-playlist'
alias gqview='inbg geeqie'
alias gq='inbg geeqie'
alias gimp='inbg gimp'
alias inkscape='inbg inkscape'
alias nautilus='inbg nautilus'
alias konqueror='inbg konqueror'
alias okular='inbg okular'

alias gqs='gq ~/screenshots'
alias gqt='gq /tmp'
alias gqd='gq ~/Downloads'
alias gqp='gq ~/Pictures'
alias gqw='gq ~/Wallpapers'
alias gqm='gq ~/Dropbox/pix/memes'
alias gqpol='gq ~/Dropbox/pix/political'

# When using a window manager other than Gnome, we don't want a Gnome desktop just because we started Nautilus
alias nlus='inbg nautilus --no-desktop'
# You could also do that permanently with:
#
#     gsettings set org.gnome.desktop.background show-desktop-icons false

alias knq='inbg konqueror'
alias konq='inbg konqueror'


alias xchat='echo "Running hexchat not xchat!" ; hexchat'

# For python 2 and python 3
alias simplehttpserver='python -m SimpleHTTPServer 8080 || python -m http.server 8080'

# If this system does not have ionice, just make a dummy
# NOTE: You must do `ionice nice ...` and not `nice ionice ...` because the latter will not find the ionice function (bash on macOS)
if ! which ionice >/dev/null 2>&1
then
	ionice() {
		"$@"
	}
fi

alias npm='ionice nice npm'
alias npmi='npm install'
alias npi='npm install'
alias ni='npm install'
alias nid='npm install --save-dev'
alias nu='npm uninstall'
alias nig='npm install --global'
alias nug='npm uninstall --global'
alias nr='npm run'
alias ns='npm start'
alias nt='npm test'
alias nx='npx'
alias nw='npm run watch'

alias yarn='ionice nice yarn'
alias y='yarn'
alias yi='yarn install'
alias ya='yarn add'
alias yad='yarn add --dev'
alias yrm='yarn remove'
alias yrd='yarn remove'
alias yga='yarn global add'
alias ygrm='yarn global remove'
alias yu='yarn upgrade'
alias ys='yarn start'
alias yt='yarn test'
alias yr='yarn run'
alias yx='yarn exec'
alias yx-='yarn exec --'
alias yw='yarn run watch'

alias jprettier='prettier --single-quote --tab-width 4 --trailing-comma all'

ldir () {
	if [ -n "$*" ]
	then l -d "$@"
	else l -d */
	fi
}
lln () {
	l "$@" | 'grep' ' \-> '
}
alias ltxt='l *.txt *.md *.TXT *.MD'
alias lsh='l *.sh'
alias lzip='l *.zip'
# `lext py` is longer than `l *.py` but it is easier to type
lext () {
	l *."$*"
}
llnk () {
	if [ -n "$*" ]
	then echolines "$@"
	else echolines *
	fi | filter_list_with test -L | wad nicels -ld
}

# Heavy processes that take a long time should be gentle.

alias debuild='ionice nice debuild'



# Easy way to store current folder, e.g. so we can refer to it later in a move command
setalt () {
	alt="$PWD"
}

fi



## Old Note: it's rather important that aliases don't get passed
## down to child shells / processes, because this would likely
## result in infinite loops.
## Well naturally they don't.  The only danger is if the aliases are loaded
## again by child scripts (e.g. from .bash_profile) and these aliases are
## interpreted in scripts.

# Run a docker command, but remove the container afterwards
alias dr='docker run --rm -ti'
