# @sourceme

## TODO: split this into jshaliases and a personal config
## aliases are worth keeping in one place because they are so fundamental to the user's shell that
## they should be easy to find if they prove troublesome
## new jsh users should be warned about shell aliases
## which or something nicer like whatis (ah that's already taken) should info of aliases before informing about cmd-line programs

# Note: some other aliases are initialised in dirhistorysetup

## TODO CONSIDER: How should we make a command?
#    - an Alias : [+] acts like a replacement, no need to pass args explicitly;
#                 [-] one-liners only.
#    - a Function : [+] multi-line, fast; [-] hog memory, global state.
#    - a Shellscript on the PATH : [+] separated, manageable; [-] slower.
## The answer is that rarely used scripts should be shellscripts, but very
## frequently used scripts/commands should be aliases and functions.
## So really we should load the core jsh commands as functions which should be
## accessible to scripts.
## TODO: Migrate the obscure stuff here the "rare" yard or joey's personal config.

## We shouldn't modify shell behaviour unless this is a user shell.
## e.g. FTPDrive was barfing because our ftpd was running our ls alias.
## But the following was failing on TERM=screen and many other types
# if [ "$TERM" = linux ] || [ "$TERM" = xterm ]
## Maybe better to check for TTY.
## isatty is not only *wrong* but can also break with "Cannot write to /dev/stdout".  (This is either because of a virtualized system, but more likely after logging in as root and then becoming a user with su.)
# if isatty
if [ -t 1 ]
then



## == JSH Aliases: Settings ==

## Without this, top can respond when the xterm is resized.
## I don't remember why I enabled it.
# test "$COLUMNS" && export COLUMNS



## == JSH Aliases: Overrides ==

## Most lusers want this:
alias mv='mv -i'

alias man='jman'

## Because it's nice for the user, but overriding is bad for scripts:
# alias apropos=japropos
alias apropos='NOPROGRESS=true catch japropos'

HIGHESTPRIORITYPROGS="cdrecord mkisofs xcdroast"
# HIGHPRIORITYPROGS='xmms mplayer mpg123'
## don't usually have root for these, but could sudo them
for PROG in $HIGHESTPRIORITYPROGS
do [ "$UID" = 0 ] && alias "$PROG"="nice -n -20 $PROG"
done

## BUG: By redefining the grep alias here, the aliases defined in preventgreperrs are lost!
## So I disabled preventgreperrs; no point loading it if we won't use it.
#. preventgreperrs
# alias grep='grep --line-buffered'
alias grep='grep --line-buffered --colour=auto'
alias sed='sed -u'



## == JSH Aliases: Additions ==

alias igrep='grep -i'

# alias jhelp="$JPATH/tools/help" ## Because bash went and used it!
# alias help='jhelp' ## Hehe I stole it back! (U can still type 'help' for bash's)
## Hmm, seems rude, so leaving help as it was.

## We should do this for everything (no reason why not to, apart from memo diskspace usage I guess):
# alias dusk="rememo dusk"
# alias dusk="memo -c true dusk"
# alias dusk="memo -t '1 minute' dusk"
alias dusk="memo -t '1 hour' dusk"
## BUG: Unfortunately we can't use -f or -t because there may be multiple arguments :f

## h is a shortcut for listing command-line history of the current shell.
## It is aliased from h to myhist which is a function.
##   h             list recent history
##   h . | h 0     list all history (in zsh this is 'history 0', in bash just 'history')
##   h <pattern>   list recent history matching <pattern>
## We need this as a function rather than a script, because a script would load its own history?
## Actually the zsh pattern implementation shows all matching, not just recent.
alias h='hist'
alias hist=myhist
if [ "$SHORTSHELL" = zsh ]
then
	# . pawan_zshrc_stripped
	myhist() {
		# if ! ([ "$1" = 0 ] || [ "$1" = . ])
		if [ "$1" = '' ]
		then history 1 | tail -n "$((LINES-2))"
		else
			if [ "$*" = 0 ] || [ "$*" = . ]
			then search='^'   # show everything
			else search="^ *[0-9][0-9]*  *.*$*"
			fi
			history 0 | grep "$search"
		fi
	}
elif [ "$SHORTSHELL" = bash ]
then
	myhist() {
		if [ "$1" = 0 ] || [ "$1" = . ]
		then history
		else history | grep "^ *[0-9][0-9]*  *.*$*" | tail -n "$((LINES-2))"
		fi
	}
fi

## Alternative: histlist displays your history search results through less.
# histlist() {
	# history 0 | grep "$*" | less +G
# }
# alias h='histlist'

alias quiet='fadevolume 0'




## == Joey's Aliases: Settings ==

## TODO: Default options should go in a different file from shortcut functions.
## Users may want to copy the default options file and edit it (e.g. remove MEMO_SHOW_INFO).

## No it's not good to have memo on an alias, because sometimes I want to pass it arguments!
# export MEMO_SHOW_INFO=true
export MEMO_SHOW_NEW_CACHEFILES=true
## Better might be:
export MEMO_DEFAULT_CONDITION='( touch -d "2 hours ago" $AGEFILE ; newer $AGEFILE "$MEMOFILE" )'
## but this is not yet supported by the memo script :P



## TODO: If the user uses memo instead of rememo, should we re-use the memoed files even if it is "out of date" according to "default condition"?
alias memo='memo -info'



## == Joey's Aliases: Overrides ==

## -a is nice, it will copy directories recursively; -i because i don't want to overwrite stuff by accident
alias cp='cp -a -i'

alias locate='memo -nd -t "1 day" locate'
alias locateonly='memo -nd -t "1 day" locateonly'
alias locateend='memo -nd -t "1 day" locateend'
alias locateword='memo -nd -t "1 day" locateword'

## Actually my ls and l aliases are now overriden by myls later.
if test $JM_COLOUR_LS; then
	XARGS='h --color'
	## We should share the following with getmachineinfo's JM_LS_OPTS
	alias ls="ls -atrFb$XARGS --time-style=long-iso"
elif test $JM_DOES_COLOUR; then
	alias ls='fakels'
else
	alias ls='ls -atrF'
fi

## This has some nasty problems - put it in config/auto.sh until it's fixed!
# alias tail=prettytail
### e.g.:
### /home/joey/linux/j/tools/prettytail: line 40: 22909 Terminated              ( SLEEPTIME=15; while true; do
### sleep $SLEEPTIME; echo "[tail] ... $SLEEPTIME seconds passed" | highlight ".*" blue 1>&2;
### done )

alias xterm='xtermbg'

## TODO: If the user uses memo instead of rememo, should we re-use the memoed file even if it is "out of date" according to "default condition"?
# alias memo='memo -info -t "2 hours"'

## Should not be called by shellscripts:
## Problem: should be called: mount "$@"
jmount() {
	'mount' "$@" |
	highlight "\<rw\>" cyan |
	highlight "\<ro\>" red |
	highlight "\<bind\>" magenta
	# highlight_words
}
alias mount='jmount'

# alias mount="'mount' | highlight_words"

jshssh () {
	xttitle "=< ssh $* >="
	## This was supposed to prevent the remote server from changing the xttitle (altho if we ssh on from there we might want to).  But it made kx vi's PageUp/Down break: export TERM=vt100
	'ssh' "$@"
}
alias ssh='jshssh'

myls() {
	## I always use -a *except* when in ~.  To -a my dotfiles, I cd into a symlink to ~.
	if [ "$PWD" = "$HOME" ]
	then 'ls' -lrtFh --color "$@"
	else 'ls' -lartFh --color "$@"
	fi
}
alias l='myls'
# ll does not show folder contents; also does not humanise sizes, so they are easier to compare.  Although dsr already does that!
# TODO: If given no arguments, should either drop the -d, or provide ./* as arguments.
alias ll='ls -lartFd --color'

# jfluxbox () {
	# . includepath /usr/local/fluxbox
	# 'fluxbox' "$@"
# }
# alias fluxbox='jfluxbox'

jcal() {
	## Highlight the current day (must strip underline termcodes to find it!)
	cal "$@" | sed 's+_++g' | highlight "\<`date | takecols 3`\>"
}
alias cal='jcal'

myxv() {
	xv -perfect "$@" &
}
alias xv=myxv



## == Joey's Aliases: Additions ==

# alias l='ls -l'
## superceded by the l shellscript:
alias l='. l'

## Haven't got used to this shortcut.  'ld' is already taken!
# alias dl='ls -ld'
## I'm still using: l -d

alias mykilljob=". 'mykilljob' -jc"

# alias wget='screen wget'

# Wow I only added 'm' and 'g' in 2012.  How many keystrokes have I wasted?

#alias m='more'
#alias le='less -R'
alias m='less -REX'
alias g='grep'

alias wad='withalldo'
alias fed='foreachdo'
# Ever used?
alias rdl='removeduplicatelines'

# Let's go all out with this.
# But h and f already have uses.
#alias h='head -n'
#alias t='tail -n'
alias h1='head -n 1'
alias t1='tail -n 1'
alias hn='head -n'
alias tn='tail -n'
alias s='sort'
alias dc='dropcols'
alias tc='takecols'
#alias f='file'
alias i='file'

# I never remember to use this
alias c='cd'
# But I love these
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
# alias c.='cd ..'
# alias c..='cd ../..'
# alias c...='cd ../../..'
# We cannot use ^ so easily, not that I really want to.
# In zsh, our ^ alias does nothing.  Although eval "^" works fine.
# In bash we get ":s^: no previous substitution".  Again eval works fine.
#alias ^='cd ..'
#alias ^.='cd ../..'

alias md=mkdir


# Let Vim use Ctrl-Q and Ctrl-S
# I have since moved these into my .vimrc, so that they will run when vim is invoked by another program (e.g. git merge or visudo)
#pathToVim=`which vim`
#if [ -n "$pathToVim" ]
#then
#	vim() {
#		stty -ixon
#		"$pathToVim" "$@"
#		stty ixon
#	}
#fi

# Open vim with last opened file
alias lvim="vim -c \"normal '0\""


alias mpl=mplayer
if [ -x "$JPATH/j/tools/mplayer" ]
then alias mpl="$JPATH/j/tools/mplayer"
fi
#alias mpl='FAST=2 ~/j/tools/mplayer'
alias smpl=smplayer


fi



## Old Note: it's rather important that aliases don't get passed
## down to child shells / processes, because this would likely
## result in infinite loops.
## Well naturally they don't.  The only danger is if the aliases are loaded
## again by child scripts (e.g. from .bash_profile) and these aliases are
## interpreted in scripts.

