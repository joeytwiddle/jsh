if [ ! "$*" ]
then
	echo "ssh-send-key [ssh_options] <user>@<host>"
	exit 1
fi

# KEYFILE="$HOME/.ssh/id_rsa.pub"
[ ! -f "$KEYFILE" ] && KEYFILE="$HOME/.ssh/id_dsa.pub"

if [ ! -f "$KEYFILE" ]
then
	echo "You have no ssh key $KEYFILE, would you like me to generate one?"
	read ANSWER
	if [ "$ANSWER" = y ] || [ "$ANSWER" = yes ]
	then
		mkdir -p "$HOME/.ssh"
		ssh-keygen -t dsa -f "$HOME/.ssh/id_dsa" -N ""
	else
		echo "I cannot send a key since you don't have one, pleaase export KEYFILE."
		exit 1
	fi
fi

cat "$KEYFILE" |

ssh-agent verbosely ssh "$@" eval "mkdir -p .ssh && cat >> .ssh/authorized_keys"
## The ssh-agent is a weak attempted fallback if the key sending fails; i'm not sure i have ever got ssh-agent to do anything useful

## Occasionally remote servers are not configured to permit key authentication.  In that case, the root user on the remote server could try adding these to /etc/ssh/sshd_config, and then restart sshd:
## RSAAuthentication yes
## PubkeyAuthentication yes



## These are notes from /stuff/joey/projects/...:

exit

## To keep a revssh session open, try something like the following:
# while true; do echo >> /tmp/revssh-client-input-moonunit_5761.txt; sleep 1; done

## SITUATION: Remote machine has run revsshserver, local machine has received session with revsshclient (and CGI).

## INTENTION: Since revssh provides only a non-interactive shell, we would next like to make a normal ssh connection to the remote machine.

## PLAN: We will use RSA authentication to ssh out of the local machine, and provide port backwarding so that normal ssh sessions can be made to the remote machine.
## We /mustn't/ let the remote ssh client ask us for a password, because this will freeze the revsshserver (temporarily?).

## Generate an RSA key on the remote machine:
# mkdir .ssh
# ssh-keygen -t rsa -f .ssh/id_rsa -N ""

# cat .ssh/id_rsa.pub |
cat .ssh/id_dsa.pub |

ssh-agent verbosely ssh "$@" eval "cat >> ./.ssh/authorized_keys"

## Paste the key into your local authorized_keys
# eg. using on localhost: cat >> ~/.ssh/authorized_keys

## I don't know why this doesn't work!
## Aha.  I think I had copied the key wrong, because + was being turned to ' ' by cgi?
# ssh-agent ssh joey@hwi.ath.cx -R 7822:localhost:22 -o "StrictHostKeyChecking no" ls /

## Even if I also use: -o "CheckHostIP no" 

## In the logs I get:
# Apr  4 15:07:08 hwi sshd[13571]: fatal: buffer_get: trying to get more bytes 129 than in buffer 55

## SOLUTION: it turned out that I was copy/pasting the key badly because revssh had problems with ' 's and '+'s
