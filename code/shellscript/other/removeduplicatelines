# jsh-depends-ignore: before
# jsh-ext-depends-ignore: from save line stream
# jsh-ext-depends: sort
# this-script-does-not-depend-on-jsh: before removeduplicatelinespo
## Does not preserve order, which makes it a "set" function, whereas removeduplicatelinespo is the corresponding (slower) "list" fn.  Could rephrase / rename scripts to convey this concept.
# but there is a nice new version with extension po which does
# using sort...

# Apparently sed can do it like this: sed '$!N; /^\(.*\)\n\1$/!P; D'
# and there is also "uniq"

## TODO: at some point check whether sort's -u option might make removeduplicatelines or keepduplicatelines or something else faster...

## Also see: uniq(1)

if [ "$1" = "--help" ]
then
  # outputs the set of lines from stdin or <files>, sorted, with duplicates removed.
cat << !

removeduplicatelines [ -adj ] [ <files> ]

  reads from stdin or <files>, removes duplicate lines, and echos to stdout.

  One line in each set of duplicates is kept, repeats are removed.

  Note: it does not preserve the order of the stream; it sorts it.

  With the -adj option: does not sort the lines before processing.
    If the stream is already sorted, this can be used to save processing.
    Otherwise, it will only squeeze adjacent duplicates.

  To remove non-adjacent duplicates *and* preserve order, use
    removeduplicatelinespo.

!
exit 1
fi

SORT="sort"
if [ "$1" = "-adj" ]
then SORT="cat"; shift
fi

Y="what would be a non-existent string, if such a string was possible (maybe sh env's NULL equiv, if we can check whether a var is set or not)" ## Pray your stream never starts with this! ## TODO could fix with a tiddly little FIRST_PASS variable!!!
cat "$@" |
$SORT |
while read X
do
  if [ ! "$X" = "$Y" ]
  then
      printf "%s\n" "$X"
      Y="$X"
  fi
done
