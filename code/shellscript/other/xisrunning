# jsh-depends-ignore: xterm
## xisrunning - check we have an accessible running X display
# jsh-ext-depends: xterm xdpyinfo

if [ ! "$DISPLAY" ]
then
	## If we are running in Mac OS X, I don't know how to detect whether we are in a virtual terminal or GUI environment, so for now we assume we are in GUI
	## Faster than $(uname) might be $OSTYPE, but this can vary more widely: 'darwin14' in bash, 'darwin14.0' in zsh
	## Better for speed would be if jsh just cached the output of uname (or summarised its own platform) at startup
	## Although it needn't be too slow: case $OSTYPE in darwin*)
	##                              or: if [[ "$OSTYPE" == darwin* ]]
	##                              or: osnover=${OSTYPE//[0-9.]/}
	## Fairly comprehensive summary here: http://stackoverflow.com/questions/394230/detect-the-os-from-a-bash-script#8597411
	if [ "$(uname)" = 'Darwin' ]
	then exit 0
	fi
	## If there is no DISPLAY variable, and we aren't running in OS X, then there is no way we could be in an X session!
	exit 1
fi
## But you can have a DISPLAY variable for a display that cannot be reached.

if xdpyinfo >/dev/null 2>&1
then exit 0
else exit 1
fi



## Old method - check we have a valid X display by spawning an xterm.
## This was slow and messy.  Sometimes it closed so fast that it broke fluxbox.
## TODO: If we do ever use this method again, consider starting xterm minimized - would be far better.

# x-terminal-emulator -e touch /tmp/xisrunning."$$" 2>/dev/null
# ## Unfortunately x-terminal-emulator backgrounds itself.  I haven't tested if wait can catch it.
# sleep 2s &
# wait
xterm -e touch /tmp/xisrunning."$$"

[ -f /tmp/xisrunning."$$" ] ; RESULT="$?"
rm -f /tmp/xisrunning."$$"
# [ "$RESULT" = 0 ] && XISRUNNING=true
exit "$RESULT"
# rm /tmp/xisrunning."$$" ## I thought this might give an exit code representing whether the file existed, but it didn't.
