Some of these are from:

- http://stackoverflow.com/questions/68372/what-is-your-single-most-favorite-command-line-trick-using-bash
- http://www.shell-fu.org/


Go to previous folder with:

    cd -



# Editing on the command-line

    <Ctrl-a>         Jump to front of line
    <Ctrl-e>         Jump to end of line

    <Escape> b       Jump back one word
    <Escape> f       Jump forwards one word

    <Escape> <Del>   Delete previous word



# Arguments on previous lines

To insert the last argument of the previous command, hit `<Esc>-.` or `<Meta>-.`.

Alternatively, you can evaluate the expression `!$` or `!:$` or `$_` (latter does not tab-complete in bash or zsh):

    cp index.html /path/to/deploy_folder/index.html
    chmod ugo+r !$

To select an arg by number (not in zsh):

    echo !:2

For all the args:

    echo !*

Repeat the previous command with `!!`

    sudo !!

Repeat the command before the previous one with `!-2`



# Earlier arguments on this line

Refer to earlier arguments on the *same* line using `!#:<arg_index>`

    0    1 2 3
    v    v v v
    echo a b c !#:2

will display "a b c b".  The last argument is `!#:$`.

Without the `#` it uses the previous line.  `$` is the last index.

Shortcuts are `!#$` for the last argument and `!#` for all the arguments, including the command.  With my shell options, I can use `<Tab>` to expand in zsh, or `<Enter>` to expand in bash.

Another trick is to use {...,...} to create two similar arguments:

    cp my_file.txt{,.backup}

# Expand complicated lines before hitting the dreaded enter

    Escape Ctrl+e
      or
    Alt+Ctrl+e    - shell-expand-line (bash, not zsh)

    Ctrl+x *      - glob-expand-word

    Ctrl+_        - undo


# Search history

<Ctrl-R> reverse search history. Hit <Ctrl-R>, type a fragment of a previous command you want to match, and hit <Ctrl-R> until you find the one you want.

Unfortunately I have remapped <Ctrl-R> but we can do something similar by dropping into vi mode:

    <Esc>/txt_to_search_for<Enter>nnnNNNa

The `nnnNNN` are examples of searching forward/back.  The final `a` is to leave vi mode.



# General

Use `^...^...` to search and replace on the previous command:

    $ ehco foo bar baz
    bash: ehco: command not found
    $ ^ehco^echo
    foo bar baz

bash has a rename builtin:

    rename 's/text_to_find/text_to_replace/' *.txt

Get "head" and "tail" (dirname and basename) of previous arguments:

    echo !$:h !$:t

This can also be applied directly to variables.

    echo Folder = $filename:h

When sending output to a file, place the filename at the beginning of the line.  This makes it easier to edit the arguments at the end of the command (in this case the search "foo").

    </var/log/messages grep foo



Popup a quick webserver on port 8000:

    alias webshare='python -m SimpleHTTPServer'


Sometimes when closing zsh, it says "Running jobs".
If you want to exit and keep the job running, try:

    setopt NO_HUP


# tmux keys

- `tmux a` re-attach to existing session

With the prefix in front (default `Ctrl-B`):

- `d` detach

Windows:

- `c` create window
- `n` / `p` / `l` - move to next/previous/last window

Panes:

- `"` split window vertically (creates a new shell and pushes old session up)
- `%` split window horizontally
- `!` break the pane out into its own window
- `x` Kill the current pane
- `j` / `k` / `h` / `l` Move between panes
- `o` move cursor between panes
- `Ctrl-o` rotate panes (keep cursor still)
- `f` find a pane by searching contents of all windows
- '{' / '}' re-arrange pane order

- `s` view sessions (to select)
- `L` switch to last session
- `D` view clients (to delete)

